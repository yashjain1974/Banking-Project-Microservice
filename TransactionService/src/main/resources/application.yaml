# src/main/resources/application.yml (Transaction Microservice)

spring:
  application:
    name: transaction-service

  datasource:
    url: jdbc:oracle:thin:@localhost:1521/ORCLPDB
    username: TRANSACT_MS
    password: transact123
    driver-class-name: oracle.jdbc.OracleDriver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.OracleDialect

  security: # <--- ADD THIS SECTION FOR SECURITY CONFIGURATION
    oauth2:
      resourceserver:
        jwt:
          # This is the URL where Keycloak exposes its public keys (JWKS endpoint).
          # Spring Security will use this to validate the signature of incoming JWTs.
          # Replace 8080 with your Keycloak port, bank-realm with your realm name.
          jwk-set-uri: http://localhost:8080/realms/bank-realm/protocol/openid-connect/certs
          # Alternatively, you can use issuer-uri if you prefer. Spring will discover JWKS from here.
          # issuer-uri: http://localhost:8080/realms/bank-realm
  kafka:
    bootstrap-servers: localhost:9092 # Address of your Kafka broker
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # To serialize DTOs to JSON
      properties:
        # Important for JSON serialization without adding __TypeId__ header, which simplifies deserialization
        spring.json.add.type.headers: false

server:
  port: 8001

logging:
  level:
    org:
      springframework:
        web: DEBUG
      hibernate: ERROR
      io.github.resilience4j: DEBUG # Enable Resilience4j logging for better visibility
      org.springframework.security: DEBUG # Enable detailed Spring Security logging for JWT validation
      org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG # Log incoming requests
      org.hibernate.SQL: DEBUG # Log Hibernate generated SQL
      org.hibernate.type.descriptor.sql.BasicBinder: TRACE # Log SQL parameter binding
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/ # Point to your Eureka Server's URL
    register-with-eureka: true
    fetch-registry: true
  instance:
    preferIpAddress: true # Optional: Good for containerized environments  

# Resilience4j Configuration
# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        recordExceptions:
          - org.springframework.web.client.HttpClientErrorException
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.kafka.KafkaException # Record Kafka exceptions as failures
        ignoreExceptions:
          - com.transaction.exceptions.AccountNotFoundException
          - com.transaction.exceptions.InsufficientFundsException
    instances:
      accountService:
        baseConfig: default
      notificationService:
        baseConfig: default
      loanService:
        baseConfig: default
      # New Circuit Breaker for Kafka publishing
      kafkaNotificationPublisher: # <--- NEW CIRCUIT BREAKER INSTANCE
        baseConfig: default
        # You might want different settings for Kafka, e.g., a higher failureRateThreshold
        # or shorter waitDurationInOpenState if you expect Kafka to recover quickly.
        # failureRateThreshold: 70
        # waitDurationInOpenState: 1s

  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 1s
        retryExceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.kafka.KafkaException # Retry on Kafka exceptions
        ignoreExceptions:
          - org.springframework.web.client.HttpClientErrorException
          - com.transaction.exceptions.AccountNotFoundException
          - com.transaction.exceptions.InsufficientFundsException
    instances:
      accountService:
        baseConfig: default
      notificationService:
        baseConfig: default
      loanService:
        baseConfig: default
      # New Retry for Kafka publishing
      kafkaNotificationPublisher: # <--- NEW RETRY INSTANCE
        baseConfig: default

management:
  tracing:
    sampling:
      probability: 1.0