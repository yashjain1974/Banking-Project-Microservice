# src/main/resources/application.yml (Notification Microservice)

spring:
  application:
    name: notification-service

  datasource:
    url: jdbc:oracle:thin:@localhost:1521/NOTIFY_PDB
    username: NOTIFY_MS
    password: notify123
    driver-class-name: oracle.jdbc.OracleDriver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.OracleDialect

  security: # <--- ADD THIS SECTION FOR SECURITY CONFIGURATION
    oauth2:
      resourceserver:
        jwt:
          # This is the URL where Keycloak exposes its public keys (JWKS endpoint).
          # Spring Security will use this to validate the signature of incoming JWTs.
          # Replace 8080 with your Keycloak port, bank-realm with your realm name.
          jwk-set-uri: http://localhost:8080/realms/bank-realm/protocol/openid-connect/certs
          # Alternatively, you can use issuer-uri if you prefer. Spring will discover JWKS from here.
          # issuer-uri: http://localhost:8080/realms/bank-realm
  kafka:
    bootstrap-servers: localhost:9092 # Address of your Kafka broker
    consumer:
      group-id: notification-service-group # Unique consumer group ID for this service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer # For robust deserialization
      properties:
        # Configure JSON deserializer to handle the specific event type
        spring.json.value.default.type: com.transaction.event.TransactionCompletedEvent # IMPORTANT: Full class name of the event DTO
        # If you have multiple event types from different topics, you might need to trust all packages:
        # spring.json.trusted.packages: "*"
        # For ErrorHandlingDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: latest # Start reading from the latest offset if no previous offset exists

server:
  port: 8002

logging:
  level:
    org:
      springframework:
        web: DEBUG
      hibernate: ERROR
      io.github.resilience4j: DEBUG # Enable Resilience4j logging for better visibility
      org.springframework.security: DEBUG # Enable detailed Spring Security logging for JWT validation
      org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG # Log incoming requests
      org.hibernate.SQL: DEBUG # Log Hibernate generated SQL
      org.hibernate.type.descriptor.sql.BasicBinder: TRACE # Log SQL parameter binding

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/ # Point to your Eureka Server's URL
    register-with-eureka: true
    fetch-registry: true
  instance:
    preferIpAddress: true # Optional: Good for containerized environments

management:
  endpoints:
    web:
      exposure:
        include: health, info, prometheus # Expose health, info, and prometheus endpoints
  metrics:
   prometheus:
    metrics:
      export:
        enabled: true # Enable Prometheus metrics export