# src/main/resources/application.yml (User Microservice)

spring:
  application:
    name: user-service # This name will be used for Eureka registration
  datasource:
    url: jdbc:oracle:thin:@localhost:1521/AUTH_PDB
    username: AUTH_MS
    password: auth123
    driver-class-name: oracle.jdbc.OracleDriver

  jpa:
    hibernate:
      ddl-auto: update # Automatically create/update tables based on entities
    show-sql: true # Log SQL statements
    properties:
      hibernate:
        format_sql: true # Format SQL for readability
        dialect: org.hibernate.dialect.OracleDialect # Hibernate dialect for Oracle

  security: # Keycloak and OAuth2 Resource Server configuration
    oauth2:
      resourceserver:
        jwt:
          # This is the URL where Keycloak exposes its public keys (JWKS endpoint).
          # Spring Security will use this to validate the signature of incoming JWTs.
          # Replace 8080 with your Keycloak port, bank-realm with your realm name.
          jwk-set-uri: http://localhost:8080/realms/bank-realm/protocol/openid-connect/certs
          # Alternatively, you can use issuer-uri if you prefer. Spring will discover JWKS from here.
          # issuer-uri: http://localhost:8080/realms/bank-realm

server:
  port: 8000 # User Service typically runs on port 8000

logging:
  level:
    org:
      springframework:
        web: DEBUG
      hibernate: ERROR
      io.github.resilience4j: DEBUG # Enable Resilience4j logging for better visibility
      org.springframework.security: DEBUG # Enable detailed Spring Security logging
      org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG # Log incoming requests
      org.hibernate.SQL: DEBUG # Log Hibernate generated SQL
      org.hibernate.type.descriptor.sql.BasicBinder: TRACE # Log SQL parameter binding
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

# Eureka Client Configuration (essential if using Eureka for service discovery)
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/ # Point to your Eureka Server's URL
    register-with-eureka: true
    fetch-registry: true
  instance:
    preferIpAddress: true # Optional: Good for containerized environments

# Resilience4j Configuration for User Service (currently commented out as it's not
# strictly needed for User Service's core function as a data provider, but kept
# for reference if you add outbound Feign clients later).
# If you enable this, ensure the 'ignoreExceptions' packages are correct (e.g., com.bank.user.exception)
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        slidingWindowType: COUNT_BASED
#        slidingWindowSize: 10
#        failureRateThreshold: 50
#        waitDurationInOpenState: 5s
#        permittedNumberOfCallsInHalfOpenState: 3
#        automaticTransitionFromOpenToHalfOpenEnabled: true
#        recordExceptions:
#          - org.springframework.web.client.HttpClientErrorException
#          - java.io.IOException
#          - java.util.concurrent.TimeoutException
#        ignoreExceptions:
#          - com.bank.user.exception.UserNotFoundException # Corrected package
#          - com.bank.user.exception.UserCreationException # Add other relevant User exceptions
#    instances:
#      # No specific Feign clients in User Service for now, but if you add one (e.g., to Notification Service)
#      # you'd define its instance here.
#      # Example: notificationService:
#      #   baseConfig: default
#
#  retry:
#    configs:
#      default:
#        maxAttempts: 3
#        waitDuration: 1s
#        retryExceptions:
#          - java.io.IOException
#          - java.util.concurrent.TimeoutException
#          - org.springframework.web.client.HttpServerErrorException
#        ignoreExceptions:
#          - org.springframework.web.client.HttpClientErrorException
#          - com.bank.user.exception.UserNotFoundException # Corrected package
#          - com.bank.user.exception.UserCreationException # Add other relevant User exceptions
#    instances:
#      # No specific Feign clients in User Service for now.
#      # Example: notificationService:
#      #   baseConfig: default

management:
  tracing:
    sampling:
      probability: 1.0